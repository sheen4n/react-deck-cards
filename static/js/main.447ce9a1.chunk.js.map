{"version":3,"sources":["services/http.js","Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","get","post","put","delete","Card","image","name","transform","className","src","alt","style","Deck","useState","deck","setDeck","drawn","setDrawn","useEffect","a","http","data","getDeck","getRandomTransform","angle","Math","random","xPos","yPos","getCard","deck_id","remaining","alert","success","Error","card","cards","id","code","value","suit","message","onClick","marginBottom","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mWAEAA,IAAMC,SAASC,QAAU,uCAEV,OACbC,IAAKH,IAAMG,IACXC,KAAMJ,IAAMI,KACZC,IAAKL,IAAMK,IACXC,OAAQN,IAAMM,QCGDC,G,MARF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC3B,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKJ,EAAOK,IAAKJ,EAAMK,MAAO,CAAEJ,kBC+D5BK,G,MAhEF,WAAO,IAAD,EACOC,mBAAS,MADhB,mBACVC,EADU,KACJC,EADI,OAESF,mBAAS,IAFlB,mBAEVG,EAFU,KAEHC,EAFG,KAIjBC,qBAAU,WAMR,OALa,uCAAG,8BAAAC,EAAA,sEACSC,EAAKpB,IAAI,gBADlB,gBACNqB,EADM,EACNA,KACRN,EAAQM,GAFM,2CAAH,oDAIbC,GACO,eACN,IAEH,IAAMC,EAAqB,WACzB,IAAMC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAClC,MAAM,aAAN,OAAoBC,EAApB,eAA+BC,EAA/B,sBAAiDJ,EAAjD,SAGIK,EAAO,uCAAG,gCAAAV,EAAA,+EAEWC,EAAKpB,IAAL,WAAac,EAAKgB,QAAlB,UAFX,mBAGW,KADfT,EAFI,EAEJA,MACCU,UAHG,uBAIVC,MAAM,4BAJI,6BAOPX,EAAKY,QAPE,uBAOa,IAAIC,MAAM,uBAPvB,QAQNC,EAAOd,EAAKe,MAAM,GACxBnB,EAAS,GAAD,mBACHD,GADG,CAEN,CACEqB,GAAIF,EAAKG,KACTjC,MAAO8B,EAAK9B,MACZC,KAAK,GAAD,OAAK6B,EAAKI,MAAV,eAAsBJ,EAAKK,MAC/BjC,UAAWgB,QAfH,kDAmBZS,MAAM,KAAMS,SAnBA,0DAAH,qDAuBb,OACE,yBAAKjC,UAAU,QACb,wBAAIA,UAAU,cAAd,6BACA,wBAAIA,UAAU,uBAAd,+CAEA,4BACEkC,QAASb,EACTlB,MAAO,CAAEgC,aAAc,IACvBnC,UAAU,YAHZ,YAOA,yBAAKA,UAAU,iBACZQ,EAAM4B,KAAI,SAAAT,GAAI,OACb,kBAAC,EAAD,iBAAUA,EAAV,CAAgBU,IAAKV,EAAKE,aClDrBS,MARf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,QCKcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtB,c","file":"static/js/main.447ce9a1.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://deckofcardsapi.com/api/deck/';\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};\n","import React from 'react';\nimport './Card.css';\n\nconst Card = ({ image, name, transform }) => {\n  return (\n    <div className='Card'>\n      <img src={image} alt={name} style={{ transform }} />\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState } from 'react';\nimport http from './services/http';\nimport Card from './Card';\nimport './Deck.css';\n\nconst Deck = () => {\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n\n  useEffect(() => {\n    const getDeck = async () => {\n      const { data } = await http.get('/new/shuffle');\n      setDeck(data);\n    };\n    getDeck();\n    return () => {};\n  }, []);\n\n  const getRandomTransform = () => {\n    const angle = Math.random() * 90 - 45;\n    const xPos = Math.random() * 40 - 20;\n    const yPos = Math.random() * 40 - 20;\n    return `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n  };\n\n  const getCard = async () => {\n    try {\n      const { data } = await http.get(`/${deck.deck_id}/draw`);\n      if (data.remaining === 0) {\n        alert('No more cards remaining!');\n        return;\n      }\n      if (!data.success) throw new Error('Failed to draw card');\n      const card = data.cards[0];\n      setDrawn([\n        ...drawn,\n        {\n          id: card.code,\n          image: card.image,\n          name: `${card.value} of ${card.suit}`,\n          transform: getRandomTransform()\n        }\n      ]);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <div className='Deck'>\n      <h1 className='Deck-title'>♦ Card Dealer ♦</h1>\n      <h2 className='Deck-title subtitle'>♦ A little demo made with React ♦</h2>\n\n      <button\n        onClick={getCard}\n        style={{ marginBottom: 50 }}\n        className='Deck-btn'\n      >\n        Get Card\n      </button>\n      <div className='Deck-cardarea'>\n        {drawn.map(card => (\n          <Card {...card} key={card.id} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Deck;\n","import React from 'react';\nimport './App.css';\nimport Deck from './Deck';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}